{"version":3,"sources":["componentes/ClockLength.js","componentes/Clock.js","componentes/PomodoroClock.js","serviceWorker.js","index.js"],"names":["ClockLength","props","idLabel","type","idDecrement","idIncrement","idLength","react_default","a","createElement","className","id","value","onClick","length","src","Clock","addClasses","duration","window","moment","time","asMilliseconds","running","paused","concat","clockLabel","onClickStartStop","onClickReset","BREAK","SESSION","BREAK_LENGTH","SESSION_LENGTH","PomodoroClock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setTime","state","sessionLength","breakLength","setState","format","setBreakLength","e","setLength","currentTarget","setSessionLength","action","typeLength","defineProperty","startStop","clearInterval","interval","setInterval","decrement","beep","play","reset","pause","currentTime","document","getElementById","prevProps","prevState","componentes_Clock","componentes_ClockLength","Component","Boolean","location","hostname","match","ReactDOM","render","componentes_PomodoroClock","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c35eaa7.chunk.js","sourcesContent":["import React from 'react';\n\nconst ClockLength = props => {\n    const idLabel = props.type === 'Break' ? 'break-label' : 'session-label';\n    const idDecrement = props.type === 'Break' ? 'break-decrement' : 'session-decrement';\n    const idIncrement = props.type === 'Break' ? 'break-increment' : 'session-increment';\n    const idLength = props.type === 'Break' ? 'break-length' : 'session-length';\n\n    return (\n        <div className=\"col-md-6 mt-2 mt-md-5\">\n            <div className=\"row justify-content-center align-items-center\">\n                <p className=\"col-12 text-center\" id={idLabel}>{props.type} Length</p>\n                <button className=\"btn shadow-none\" id={idDecrement} value=\"-\" onClick={props.onClick}>\n                    <i className=\"fas fa-minus-square fa-2x\"></i>\n                </button>\n                <p className=\"font-weight-bolder m-0 align-self-center\" id={idLength}>{props.length}</p> \n                <audio id=\"beep\" src=\"https://goo.gl/65cBl1\" />\n                <button className=\"btn shadow-none\" id={idIncrement} value=\"+\" onClick={props.onClick}>\n                    <i className=\"fas fa-plus-square fa-2x\"></i>\n                </button>                        \n            </div>\n        </div>\n    );\n}\n\nexport default ClockLength;","import React from 'react';\n\nconst Clock = props => {\n        \n    let addClasses = \"\";\n    let duration = window.moment.duration('00:' + props.time).asMilliseconds();\n\n    if (props.running || props.paused) {\n        if (duration > 60000) {\n            addClasses = \"time-left\";\n        } else {\n            addClasses = \"one-minute\";\n        }\n    }\n    if (props.paused) {\n        addClasses = addClasses.concat(\" paused\");\n    }\n\n    return (\n        <div className=\"clock col-md-8 mt-2 mt-md-5 p-4\">\n            <div className=\"row justify-content-center\">\n                <p className=\"col-12 text-center\" id=\"timer-label\">{props.clockLabel}</p>                         \n                <p className={`col-12 text-center shadow ${addClasses}`} id=\"time-left\">{props.time}</p>\n            </div>\n            <div className=\"row justify-content-center\">\n                <button className=\"btn shadow-none\" id=\"start_stop\" onClick={props.onClickStartStop}>\n                    <i className=\"fas fa-play fa-2x\"></i>\n                    <i className=\"fas fa-pause fa-2x\"></i>\n                </button>\n                <button className=\"btn shadow-none\" id=\"reset\" onClick={props.onClickReset}>\n                    <i className=\"fas fa-sync-alt fa-2x\"></i>\n                </button>   \n            </div>                \n        </div>            \n    );\n}\n \nexport default Clock;","import React, { Component } from 'react';\nimport ClockLength from './ClockLength';\nimport Clock from './Clock';\n\nconst BREAK = 'Break';\nconst SESSION = 'Session';\nconst BREAK_LENGTH = 'breakLength';\nconst SESSION_LENGTH = 'sessionLength';\n\nclass PomodoroClock extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      type: SESSION,\n      breakLength: 5,\n      sessionLength: 25,\n      time: '',\n      running: false,\n      paused: false\n    }\n\n    this.interval = null;\n    this.beep = null;\n  } \n\n  componentDidMount() {\n    this.setTime();\n    this.beep = document.getElementById('beep');\n  } \n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sessionLength !== this.state.sessionLength) {\n      this.setTime();\n    }\n  }\n\n  setTime = () => {\n    let time;\n\n    if (this.state.type === SESSION) {\n      time = window.moment.duration(this.state.sessionLength * 60 * 1000, 'milliseconds');\n    } else {\n      time = window.moment.duration(this.state.breakLength * 60 * 1000, 'milliseconds');\n    }\n        \n    this.setState({time: window.moment(time.asMilliseconds()).format('mm:ss')});\n  }\n\n  setBreakLength = e => {\n    this.setLength(this.state.running, e.currentTarget.value, this.state.breakLength, BREAK_LENGTH);\n  }\n\n  setSessionLength = e => {\n    this.setLength(this.state.running, e.currentTarget.value, this.state.sessionLength, SESSION_LENGTH);\n  }\n\n  setLength = (running, action, length, typeLength) => {\n    if (!running && action === '+' && length < 60){\n      this.setState({[typeLength]: length + 1});\n    } else if (!running && action === '-' && length > 1) {\n      this.setState({[typeLength]: length - 1});\n    }\n  }\n\n  startStop = () => {\n    if (!this.state.running) { \n      this.setState({running: true, paused: false});\n      this.interval = setInterval(() => this.decrement(), 1000);      \n    } else {\n      this.setState({running: false, paused: true});\n      clearInterval(this.interval);      \n    }\n  }\n\n  decrement = () => {\n    let duration = window.moment.duration('00:' + this.state.time).asMilliseconds();\n\n    if ((duration - 1000) < 0) {\n      this.setTime();\n      return;\n    }\n\n    let time = window.moment.duration(duration - 1000, 'milliseconds');\n\n    this.setState({\n      time: window.moment(time.asMilliseconds()).format('mm:ss')\n    });\n\n    if ((duration - 1000) === 0) {\n      this.beep.play();\n      if (this.state.type === BREAK) {\n        this.setState({type: SESSION});\n      } else {\n        this.setState({type: BREAK});\n      }\n    }\n  }\n\n  reset = () => {\n    this.beep.pause();\n    this.beep.currentTime = 0;\n    const time = window.moment.duration(this.state.sessionLength * 60 * 1000, 'milliseconds');\n\n    this.setState({\n      type: SESSION,\n      breakLength: 5,\n      sessionLength: 25,\n      clockLabel: SESSION,\n      time: window.moment(time.asMilliseconds()).format('mm:ss'),\n      running: false,\n      paused: false\n    });\n\n    clearInterval(this.interval);\n  }\n\n  render() {    \n    return (\n      <div className=\"container-fluid\" id=\"wrapper\">\n        <div className=\"mt-5 col-md-6 offset-md-3 pomodoro-clock\">\n          <div className=\"row justify-content-center\">\n            <h1 className=\"col-md-8 text-center mt-3 mt-md-5\">Pomodoro Clock</h1>\n          </div>\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-8\">\n              <div className=\"row justify-content-center\">\n                <Clock \n                  clockLabel={this.state.type}\n                  time={this.state.time}\n                  running={this.state.running}\n                  paused={this.state.paused}\n                  onClickStartStop={this.startStop}\n                  onClickReset={this.reset}\n                />\n              </div>\n              <div className=\"row justify-content-center mb-md-4\">\n                <ClockLength \n                  type={BREAK}\n                  length={this.state.breakLength}  \n                  onClick={this.setBreakLength}           \n                />\n                <ClockLength \n                  type={SESSION}\n                  length={this.state.sessionLength}  \n                  onClick={this.setSessionLength}  \n                />\n              </div>            \n            </div>\n          </div>      \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PomodoroClock;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/styles.scss';\nimport PomodoroClock from './componentes/PomodoroClock';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PomodoroClock />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}